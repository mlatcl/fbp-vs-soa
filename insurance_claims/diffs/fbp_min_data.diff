diff --git a/fbp_app_min/__init__.py b/fbp_app_data/__init__.py
index ba938a8..6218f5b 100755
--- a/fbp_app_min/__init__.py
+++ b/fbp_app_data/__init__.py
@@ -1 +1 @@
-from .fbp_app_min import App
\ No newline at end of file
+from .fbp_app_data import App
\ No newline at end of file
diff --git a/fbp_app_min/__pycache__/__init__.cpython-38.pyc b/fbp_app_data/__pycache__/__init__.cpython-38.pyc
index 5b26b76..e7f58ca 100755
Binary files a/fbp_app_min/__pycache__/__init__.cpython-38.pyc and b/fbp_app_data/__pycache__/__init__.cpython-38.pyc differ
diff --git a/fbp_app_min/__pycache__/app.cpython-38.pyc b/fbp_app_data/__pycache__/app.cpython-38.pyc
index 0b2d4a6..352bf77 100755
Binary files a/fbp_app_min/__pycache__/app.cpython-38.pyc and b/fbp_app_data/__pycache__/app.cpython-38.pyc differ
diff --git a/fbp_app_data/__pycache__/fbp_app_data.cpython-38.pyc b/fbp_app_data/__pycache__/fbp_app_data.cpython-38.pyc
new file mode 100755
index 0000000..a1d6140
Binary files /dev/null and b/fbp_app_data/__pycache__/fbp_app_data.cpython-38.pyc differ
diff --git a/fbp_app_min/__pycache__/fbp_app_min.cpython-38.pyc b/fbp_app_min/__pycache__/fbp_app_min.cpython-38.pyc
deleted file mode 100755
index 984d50c..0000000
Binary files a/fbp_app_min/__pycache__/fbp_app_min.cpython-38.pyc and /dev/null differ
diff --git a/fbp_app_min/fbp_app_min.py b/fbp_app_data/fbp_app_data.py
similarity index 86%
rename from fbp_app_min/fbp_app_min.py
rename to fbp_app_data/fbp_app_data.py
index e124a37..4a4b092 100755
--- a/fbp_app_min/fbp_app_min.py
+++ b/fbp_app_data/fbp_app_data.py
@@ -1,5 +1,7 @@
+import os
 from typing import List, Dict, Callable, Tuple
-from collections import namedtuple
+
+import pandas as pd
 
 from flowpipe import Graph, INode, Node, InputPlug, OutputPlug
 from insurance_claims.record_types import *
@@ -229,8 +231,10 @@ class App():
     def __init__(self):
         self._build()
 
-    def evaluate(self):
+    def evaluate(self, save_dataset=False):
         self.graph.evaluate()
+        if save_dataset:
+            self._save_dataset()
         return self.get_outputs()
 
     def add_data(self, new_claims):
@@ -255,11 +259,6 @@ class App():
         # output streams
         self.claim_payouts_stream = ClaimPayoutStream(graph=graph)
 
-        self._all_streams = [self.new_claims_stream, claim_values_stream,
-                             high_value_claims_stream, low_value_claims_stream,
-                             simple_claims_stream, complex_claims_stream,
-                             self.claim_payouts_stream]
-
         # processing nodes
         calculate_claim_value = CalculateClaimValue(graph=graph)
         classify_claim_value = ClassifyClaimValue(graph=graph)
@@ -290,6 +289,50 @@ class App():
         self.graph = graph
 
 
+    def _save_dataset(self):
+        nodes_to_collect = ["", "ComplexClaimsStream", "SimpleClaimsStream"]
+
+        get_stream_node_data = \
+            lambda node_name: (next(node for node in self.graph.all_nodes if node.name == node_name)).get_data()
+
+        new_claims = get_stream_node_data("NewClaimsStream")
+        complex_claims = get_stream_node_data("ComplexClaimsStream")
+        complex_claim_ids = [c["claim_id"] for c in complex_claims]
+        simple_claims = get_stream_node_data("SimpleClaimsStream")
+        simple_claim_ids = [c["claim_id"] for c in simple_claims]
+
+        df = pd.DataFrame.from_records(new_claims)
+        df['is_complex'] = pd.Series(dtype="boolean")
+
+        for index, row in df.iterrows():
+            if row["claim_id"] in complex_claim_ids:
+                df.at[index, "is_complex"] = True
+            elif row["claim_id"] in simple_claim_ids:
+                df.at[index, "is_complex"] = False
+            else:
+                raise ValueError(f"Cannot find claim {row['claim_id']}")
+
+        self._write_data_to_csv("claim_complexity.csv", df)
+
+    def _write_data_to_csv(self, filename, df):
+        """
+        Writes data from given pandas DataFrame to file
+        Creates new file (with header) if it doesn't exist
+        otherwise appends data to existing file
+
+        Does not do anything if the dataset is empty
+        """
+        if df.empty:
+            return
+
+        if os.path.isfile(filename):
+            df.to_csv(filename, mode="a", index=False, header=False)
+        else:
+            df.to_csv(filename, mode="w", index=False, header=True)
+
+
+
+
 if __name__ == "__main__":
     app = App()
     graph = app.graph
